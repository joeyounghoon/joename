import streamlit as st
import openai
from PIL import Image
from io import BytesIO
import requests

# 함수: OpenAI API 호출을 통한 텍스트 응답 생성
@st.cache_data
def get_openai_text_response(api_key, messages):
    openai.api_key = api_key
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages
    )
    return response.choices[0].message['content']

# 함수: OpenAI API 호출을 통한 이미지 생성
@st.cache_data
def get_openai_image_response(api_key, prompt):
    openai.api_key = api_key
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size="512x512"
    )
    image_url = response['data'][0]['url']
    image_response = requests.get(image_url)
    return Image.open(BytesIO(image_response.content))

# 세션 상태 초기화
if 'api_key' not in st.session_state:
    st.session_state.api_key = ''
if 'text_prompt' not in st.session_state:
    st.session_state.text_prompt = ''
if 'image_prompt' not in st.session_state:
    st.session_state.image_prompt = ''
if 'messages' not in st.session_state:
    st.session_state.messages = []

# API Key 입력
st.sidebar.title("Settings")
st.session_state.api_key = st.sidebar.text_input("Enter your OpenAI API Key", type="password", value=st.session_state.api_key)

# 페이지 선택
page = st.sidebar.selectbox("Select a Page", ["Chat with GPT-4", "Generate Image with Dall-E"])

if page == "Chat with GPT-4":
    st.title("GPT-4 Chatbot")

    # 사용자 입력
    user_input = st.text_input("Enter your message:")

    # 응답 표시
    if st.button("Send"):
        if st.session_state.api_key and user_input:
            # 사용자 메시지를 Thread에 추가
            st.session_state.messages.append({"role": "user", "content": user_input})
            response = get_openai_text_response(st.session_state.api_key, st.session_state.messages)
            # Assistant 메시지를 Thread에 추가
            st.session_state.messages.append({"role": "assistant", "content": response})
            st.text_area("Assistant Response:", value=response, height=200)
        else:
            st.error("Please enter both the API Key and a message.")

    # Clear 버튼: 기존 Thread 삭제 후 새로운 Thread 생성
    if st.button("Clear"):
        st.session_state.messages = []

    # 대화창 나가기 버튼: Thread, Assistant 삭제
    if st.button("Exit"):
        st.session_state.api_key = ''
        st.session_state.messages = []
        st.experimental_rerun()

    # 메시지 로그 표시
    if st.session_state.messages:
        st.subheader("Conversation Log")
        for message in st.session_state.messages:
            role = "User" if message['role'] == "user" else "Assistant"
            st.markdown(f"**{role}:** {message['content']}")

elif page == "Generate Image with Dall-E":
    st.title("Dall-E Image Generator")
    
    # 프롬프트 입력
    st.session_state.image_prompt = st.text_area("Enter your prompt for image generation:", value=st.session_state.image_prompt)
    
    # 이미지 생성 및 표시
    if st.button("Generate Image"):
        if st.session_state.api_key and st.session_state.image_prompt:
            image = get_openai_image_response(st.session_state.api_key, st.session_state.image_prompt)
            st.image(image, caption="Generated by Dall-E", use_column_width=True)
        else:
            st.error("Please enter both the API Key and a prompt for image generation.")
